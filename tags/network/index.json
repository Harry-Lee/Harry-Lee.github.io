[
    {
        "ref": "https://harrylee.me/blog/2016-06-25-docker-create-your-own-ipsec-l2tp-vpn-container/",
        "title": "Docker: Create your own IPsec/L2TP VPN container",
        "section": "blog",
        "tags": ["docker","vpn","network"],
        "date" : "2016.06.25",
        "body": "To configure your own VPN hosted on your own VPS is not difficult at all, especially when there are numerous configuration scripts lying around the internet. We will set up such a VPN using Docker hosted on a Microsoft Azure VM.\nSet Up Listed below is my set up. You don\u0026rsquo;t have to use the exact set up as me, as the configurations should be the same with any VM (Virtual Machine) running Docker (that\u0026rsquo;s the beauty of Docker!).\n Azure VM running Ubuntu 16.04 Xenial  The size of the Virtual Machine does not matter, so you can choose the cheapest one. You can use other Linux distributions, supported ones are:  Ubuntu 16.04, 14.04, 12.04 Debian 8 Jessie CentOS 7, 6     VM has Port 4500 and 500 open for UDP connections. Latest docker-engine installed Using the IPsec VPN Server on Docker Docker image  Configuration The configuration is extremely simple. You literally just follow the instructions listed on IPsec VPN Server on Docker. I shall summarise it below. The below instructions should be executed on the VM and I assume that you have the set up mentioned above.\n  Pull the image\n$ docker pull hwdsl2/ipsec-vpn-server   Create an environment file in your home directory e.g. (/home/dockeruser/vpn.env) with the following content:\nVPN_IPSEC_PSK=\u0026lt;IPsec pre-shared key\u0026gt; VPN_USER=\u0026lt;VPN Username\u0026gt; VPN_PASSWORD=\u0026lt;VPN Password\u0026gt;   DO NOT put single or double quotes around values, or add space around =. Also, DO NOT use these characters within values: \\ \u0026quot; '\n  Load the IPsec NETKEY kernel module:\n$ sudo modprobe af_key   Change directory to your home directory and execute below:\n$ docker run \\  --name ipsec-vpn-server \\  --env-file ./vpn.env \\  -p 500:500/udp \\  -p 4500:4500/udp \\  -v /lib/modules:/lib/modules:ro \\  -d --privileged \\  hwdsl2/ipsec-vpn-server   Now you have a running VPN!\n  Ports You have to remember to open up the ports (500/UDP and 4500/UDP) in order for this to work. I will describe how to do this for Azure VMs using the Network Security Group settings.\nThe following configuration assumes that your VM was created using Resource Manager and not Classic.\n   In your VM instance, select Settings-\u0026gt;Network interfaces-\u0026gt;Your VM interface.\n  In the Network Interface, select Settings-\u0026gt;Network security group-\u0026gt;Your VM network security group. There should just be one by default.\n  In the Network Security Group, select Settings-\u0026gt;Inbound security rules-\u0026gt;Your rules\n  Add the two ports to your inbound rules: 500/UDP and 4500/UDP\n  Conclusion Now you can go ahead and connect to your newly configured VPN! You can restart or stop your container at any time if you do not want to incur costs when you are not using it. This can all be achieved with one command thanks to Docker!\n"
    }
,
    {
        "ref": "https://harrylee.me/blog/2015-01-10-ubuntu-sharing-externally-connected-drives-over-network/",
        "title": "Ubuntu: Sharing externally connected drives over network",
        "section": "blog",
        "tags": ["ubuntu","network"],
        "date" : "2015.01.10",
        "body": "When you have external drives connected to the server, it would be very useful if you can share these drives to users accessing the server as well. This is useful if you have a home media server with externally connected drives.\nThis post aims to share drives that are NTFS formatted and changing the permissions of the mounted drives.\nMethod   Unmount the drive that is connected already and remount to another folder giving permissions to users.\n$ sudo umount -l /dev/sdX1 Where sdX1 is the device ID.\nTo check the device ID, execute:\n$ df or\n$ lsblk Remount to another folder.\n$ sudo mount -t ntfs-3g -o rw /dev/sdX1 /media/path/to/folder This assumes that you are connecting a NTFS formatted drive.\n  Change the permission of the mount point to allow access to users.\n$ sudo chown -R $USER:$USER /media/path/to/folder This gives permission, both read and write, to the logged in user that accesses the drive. You can adjust this accordingly.\n  "
    }
]
