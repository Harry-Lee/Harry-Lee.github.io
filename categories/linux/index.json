[
    {
        "ref": "https://harrylee.me/blog/2016-05-24-ubuntu-backup-files-regularly-using-rsync-and-cron/",
        "title": "Ubuntu: Backup files regularly using expect, rsync and Cron",
        "section": "blog",
        "tags": ["ubuntu"],
        "date" : "2016.05.24",
        "body": "Want to backup your remote files at regular intervals? This post is for you.\nThis post focuses on: rsync, expect and cron. To access the remote server, I\u0026rsquo;m assuming that you are using ssh (with password authentication) for that. If you use ftp or other protocols, you will have to tweak the instructions a bit. If you are using SSH with public key (well done!), you will have to tweak the rsync command to use public key.\nBackground The idea is to use rsync to copy files from the remote server to your local repository. Since remote servers are normally protected by passwords (or private-public key pairs), we need a way for the terminal to enter the password for us. This is where expect comes in.\n Expect is a natural and intuitive automation scripting language that operates in much the same way humans do when interacting with a system.\n So expect removes the need for human interaction when a password is needed. For a detailed way to use expect see Using Expect Scripts to Automate Tasks.\nWe then use cron to schedule automation of this task. See How To Cron.\nMethod   Create a new file in ~/Documents/, backup.exp, with the contents below:\n#!/usr/bin/expect -f  set timeout 19900 set pass \u0026#34;\u0026lt;mypassword\u0026gt;\u0026#34; spawn rsync -av -e ssh \u0026lt;user\u0026gt;@\u0026lt;ip address\u0026gt;:\u0026lt;/home/user/remote\u0026gt; \u0026lt;\u0026#34;/home/user/backup/remote\u0026#34;\u0026gt; expect \u0026#34;assword\u0026#34; sleep 2 send \u0026#34;$pass\\r\u0026#34; expect -re \u0026#34;total size is\u0026#34; expect -re \u0026#34;$\u0026#34; puts \u0026#34;Successfully backed up!\u0026#34;   replace all the necessary parameters with your own credentials. (Basically everything encased between \u0026lt; \u0026gt;).    Change the permission of the file to be executable:\n$ sudo chmod +x ~/Documents/backup.exp   Run cron:\n$ sudo crontab -e   Place the following line at the end of the file.\n 00 06,12,18,00 * * * /home/user/Documents/backup.exp This basically tells the server to execute the backup.exp script every 6 hours, every day at 6:00 AM, 12:00 PM, 18:00 PM and 00:00 AM. You can change the intervals however you see fit.\n  Conclusion This is really useful if you have your own file server with files that are created/modified regularly. Backing up these files consistently and frequently can give you peace of mind that your files are \u0026ldquo;safer\u0026rdquo; than when you do not have this in place.\n"
    }
,
    {
        "ref": "https://harrylee.me/blog/2015-02-08-ubuntu-suspend-and-reboot-at-specific-times-using-cron/",
        "title": "Ubuntu: Suspend and reboot at specific times using Cron",
        "section": "blog",
        "tags": ["ubuntu"],
        "date" : "2015.02.08",
        "body": "If you have a server at home and you want it to be on only during specific times and not 24/7, this script is for you.\nCron not only is the best tool for this, it also handles scheduled tasks.\n Cron is a system daemon used to execute desired tasks (in the background) at designated times.\n Method   Install Cron on Ubuntu if it is not already installed.\n  Create a new file, suspend_until, in your ~/Documents/ and place the following contents in it. This script is written by Romke van der Meulen.\n#!/bin/bash  # Auto suspend and wake-up script # # Puts the computer on standby and automatically wakes it up at specified time # # Written by Romke van der Meulen \u0026lt;redge.online@gmail.com\u0026gt; # Minor mods fossfreedom for AskUbuntu # # Takes a 24hour time HH:MM as its argument # Example: # suspend_until 9:30 # suspend_until 18:45 # ------------------------------------------------------ # Argument check if [ $# -lt 1 ]; then echo \u0026#34;Usage: suspend_until HH:MM\u0026#34; exit fi # Check whether specified time today or tomorrow DESIRED=$((`date +%s -d \u0026#34;$1\u0026#34;`)) NOW=$((`date +%s`)) if [ $DESIRED -lt $NOW ]; then DESIRED=$((`date +%s -d \u0026#34;$1\u0026#34;` + 24*60*60)) fi # Kill rtcwake if already running sudo killall rtcwake # Set RTC wakeup time # N.B. change \u0026#34;mem\u0026#34; for the suspend option # find this by \u0026#34;man rtcwake\u0026#34; sudo rtcwake -a -m disk -t $DESIRED \u0026amp; # feedback echo \u0026#34;Suspending...\u0026#34; # give rtcwake some time to make its stuff sleep 2 # then suspend # N.B. dont usually require this bit #sudo pm-suspend # Any commands you want to launch after wakeup can be placed here # Remember: sudo may have expired by now # Wake up with monitor enabled N.B. change \u0026#34;on\u0026#34; for \u0026#34;off\u0026#34; if # you want the monitor to be disabled on wake xset dpms force on # and a fresh console clear echo \u0026#34;Good morning!\u0026#34;    Change the permission of the file so that it is executable.\n$ sudo chmod +x ~/Documents/suspend_until   Run crontab.\n$ sudo crontab -e   Place the following line at the end of the file.\n00 02 * * * /home/user/Documents/suspend_until 09:00 This basically tells the server to execute the suspend_until script at 2:00 AM. The 09:00 appended at the end of the line tells the server to wake up at 9:00 AM. The details are all explained in the script.\n  Save the crontab file and reboot.\n  "
    }
,
    {
        "ref": "https://harrylee.me/blog/2015-01-10-ubuntu-sharing-externally-connected-drives-over-network/",
        "title": "Ubuntu: Sharing externally connected drives over network",
        "section": "blog",
        "tags": ["ubuntu","network"],
        "date" : "2015.01.10",
        "body": "When you have external drives connected to the server, it would be very useful if you can share these drives to users accessing the server as well. This is useful if you have a home media server with externally connected drives.\nThis post aims to share drives that are NTFS formatted and changing the permissions of the mounted drives.\nMethod   Unmount the drive that is connected already and remount to another folder giving permissions to users.\n$ sudo umount -l /dev/sdX1 Where sdX1 is the device ID.\nTo check the device ID, execute:\n$ df or\n$ lsblk Remount to another folder.\n$ sudo mount -t ntfs-3g -o rw /dev/sdX1 /media/path/to/folder This assumes that you are connecting a NTFS formatted drive.\n  Change the permission of the mount point to allow access to users.\n$ sudo chown -R $USER:$USER /media/path/to/folder This gives permission, both read and write, to the logged in user that accesses the drive. You can adjust this accordingly.\n  "
    }
]
